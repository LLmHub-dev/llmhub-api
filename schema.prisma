generator client {
  provider                    = "prisma-client-py"
  enable_experimental_decimal = "true"
  recursive_type_depth        = "5"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id                     String       @id @default(cuid())
  name                   String?
  email                  String?      @unique
  emailVerified          DateTime?
  image                  String?
  createdAt              DateTime     @default(now()) @map("created_at")
  updatedAt              DateTime     @default(now()) @map("updated_at")
  role                   UserRole     @default(USER)
  stripeCustomerId       String?      @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?      @unique @map("stripe_subscription_id")
  stripePriceId          String?      @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime?    @map("stripe_current_period_end")
  creditBalance          Decimal      @default(0.0) @db.Decimal(10, 6)
  accounts               Account[]
  apiCallLogs            ApiCallLog[]
  apiKeys                ApiKey[]
  sessions               Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model ApiKey {
  id          String       @id @default(cuid())
  name        String
  key         String       @unique
  createdAt   DateTime     @default(now()) @map("created_at")
  userId      String
  apiCallLogs ApiCallLog[]
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("api_keys")
}

model ApiCallLog {
  id                String   @id @default(cuid())
  userId            String
  apiKeyId          String
  model_name        String
  prompt_tokens     Int
  completion_tokens Int
  total_tokens      Int
  credits_used      Decimal  @db.Decimal(10, 6)
  timestamp         DateTime @default(now())
  apiKey            ApiKey   @relation(fields: [apiKeyId], references: [key], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([apiKeyId])
  @@map("api_call_logs")
}

enum UserRole {
  ADMIN
  USER
}
